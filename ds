; Проект: Онлайн-сервис поиска попутчиков «Попутчик»

; Технологии: FastAPI + PostgreSQL + SQLAlchemy + JWT + (WebSocket для чата)


; ---

; 1. Цели проекта

; Создать веб-сервис, который позволит:

; Водителям публиковать поездки (маршрут, дату, цену, кол-во мест).

; Пассажирам искать поездки и бронировать места.

; Обеспечить возможность общения между пользователями и систему рейтингов.

; Минимизировать расходы на поездки, сделать транспорт доступнее.



; ---

; 2. Основной функционал

; 2.1 Пользователи

; Регистрация (email, телефон, пароль).

; Авторизация (JWT токены).

; Роли: Пассажир / Водитель (один аккаунт может быть и тем, и другим).

; Профиль пользователя: имя, фото, рейтинг, контактные данные.


; 2.2 Поездки

; Водитель может создать поездку:

; Откуда (город, адрес)

; Куда (город, адрес)

; Дата и время выезда

; Количество мест

; Цена за место

; Описание (например, “поеду через Нурек, могу забрать там”)


; Редактирование и удаление своих поездок.


; 2.3 Поиск поездок

; Поиск по:

; Городу отправления и прибытия

; Дате

; Цене (диапазон)


; Сортировка: по цене, по времени выезда.


; 2.4 Бронирования

; Пассажир бронирует место.

; Водитель подтверждает или отклоняет заявку.

; После подтверждения — обновляется кол-во свободных мест.

; История бронирований в профиле.


; 2.5 Чат (WebSocket)

; Общение между пассажиром и водителем после брони.

; Уведомления о новых сообщениях.


; 2.6 Отзывы и рейтинги

; После завершённой поездки пассажир и водитель могут оставить отзыв.

; Рейтинг пользователя рассчитывается как среднее значение.



; ---

; 3. Дополнительный функционал (MVP+)

; Интеграция с картами (расчёт расстояния, маршрут).

; Уведомления по email.

; Оплата онлайн (через локальные банки / наличные при встрече).



; ---

; 4. API endpoints (черновик)

; Auth

; POST /auth/register — регистрация

; POST /auth/login — вход (JWT)


; Users

; GET /users/me — получить профиль

; PUT /users/me — обновить профиль


; Trips

; POST /trips/ — создать поездку

; GET /trips/ — список поездок (с фильтрами)

; GET /trips/{trip_id} — детали поездки

; PUT /trips/{trip_id} — редактировать

; DELETE /trips/{trip_id} — удалить


; Booking

; POST /trips/{trip_id}/book — забронировать

; PUT /bookings/{booking_id}/confirm — водитель подтверждает

; PUT /bookings/{booking_id}/cancel — отмена


; Reviews

; POST /reviews/{user_id} — оставить отзыв

; GET /reviews/{user_id} — посмотреть отзывы


; Chat (WebSocket)

; ws://chat/{trip_id}/{user_id} — подключение к чату



; ---

; 5. Стек технологий

; Backend: FastAPI (Python)

; Database: PostgreSQL + SQLAlchemy ORM

; Auth: JWT (Password Bearer)

; Chat: WebSocket (FastAPI)

; Docs: Swagger (OpenAPI)

; Deploy: Docker + Nginx + Gunicorn/Uvicorn



; ---

; 6. Архитектура проекта

; project/
; │── main.py
; │
; ├── db/
; │   ├── database.py         # Подключение к PostgreSQL
; │   └── session.py          # Создание сессии (если нужно отдельно)
; │
; ├── models/
; │   ├── user.py             
; │   ├── trip.py             
; │   ├── booking.py          
; │   └── review.py           
; │
; ├── schemas/
; │   ├── user.py
; │   ├── trip.py
; │   ├── booking.py
; │   └── review.py
; │
; ├── routers/
; │   ├── auth.py
; │   ├── users.py
; │   ├── trips.py
; │   ├── bookings.py
; │   ├── reviews.py
; │   └── chat.py
; │
; ├── services/
; │   ├── auth.py
; │   ├── trip_logic.py
; │   └── booking_logic.py
; │
; ├── utils/
; │   ├── hashing.py
; │   ├── jwt.py
; │   └── validators.py
; │
; └── tests/
;     ├── test_auth.py
;     ├── test_trips.py
;     └── test_bookings.py


; ---

; 7. MVP (первая версия)

; 1. Регистрация / вход.


; 2. Создание и поиск поездок.


; 3. Бронирование мест.


; 4. Мини-чат (без пушей, просто WebSocket).


; 5. Отзывы.




; ---

; 8. Дальнейшее развитие (после MVP)

; Онлайн-оплата.


; Геолокация (live-tracking).

; Мобильное приложение (через API).

